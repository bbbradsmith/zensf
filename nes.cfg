SYMBOLS
{
	BANK_ART:   type = import;
	BANK_BASE:  type = import;
	BANK_END:   type = import;
	ZP_LOW:     type = import;
	RAM_LOW:    type = import;
	
	NSFS_SIZE:  type = weak, value = BANK_ART * $1000;
	ART_SIZE:   type = weak, value = (BANK_BASE - BANK_ART) * 1000;
	BASE_SIZE:  type = weak, value = (BANK_END - BANK_BASE) * 1000;
	STUB_SIZE:  type = weak, value = $20
}

MEMORY
{
	RAM_ZP:     start =  ZP_LOW, size =        $100 -  ZP_LOW, type = rw, file = "";
	RAM_STACK:  start =   $0100, size =                  $100, type = rw, file = "";
	RAM_MAIN:   start = RAM_LOW, size =        $800 - RAM_LOW, type = rw, file = "";

	ROM_HEADER: start = $0000,   size =                   $10, type = ro, file = %O, fill = yes, fillval = 0;
	ROM_NSFS:   start = $0000,   size =              NSF_SIZE, type = ro, file = %O, fill = yes, fillval = 0;
	ROM_ART:    start = $0000,   size =              ART_SIZE, type = ro, file = %O, fill = yes, fillval = 0;

	ROM_BASE:   start = $8000,   size = BASE_SIZE - STUB_SIZE, type = ro, file = %O, fill = yes, fillval = 0;
	ROM_RESET:  start = $FFE0,   size =             STUB_SIZE, type = ro, file = %O, fill = yes, fillval = 0;
}

SEGMENTS
{
	BASE_ZP:    load =     RAM_ZP, type =  zp, define = yes;
	CUSTOM_ZP:  load =     RAM_ZP, type =  zp, define = yes;
	STACK:      load =      STACK, type = bss, define = yes. optional = yes;
	RAMP_CODE:  load =   ROM_BASE, type =  ro, define = yes, run = RAM_MAIN;
	RAMP_RAM:   load =   RAM_MAIN, type =  rw, define = yes;
	BASE_RAM:   load =   RAM_MAIN, type = bss, define = yes;
	CUSTOM_RAM: load =   RAM_MAIN, type = bss, define = yes;
	OAM:        load =   RAM_MAIN, type = bss, define = yes, align = $100;

	HEADER:     load = ROM_HEADER, type =  ro, define = yes;
	NSFS:       load =   ROM_NSFS, type =  ro, define = yes;
	ART:        load =    ROM_ART, type =  ro, define = yes;
	BASE_LOW:   load =   ROM_BASE, type =  ro, define = yes;
	BASE:       load =   ROM_BASE, type =  ro, define = yes;
	CUSTOM:     load =   ROM_BASE, type =  ro, define = yes;
	RESET:      load =  ROM_RESET, type =  ro, define = yes;
	VECTORS:    load =  ROM_RESET, type =  ro, define = yes, start = $FFFA;
}
