SYMBOLS
{
	BANK_ART:   type = import, addrsize = abs;
	BANK_BASE:  type = import, addrsize = abs;
	BANK_END:   type = import, addrsize = abs;
	ZP_LOW:     type = import, addrsize = abs;
	ZP_HIGH:    type = import, addrsize = abs;
	RAM_LOW:    type = import, addrsize = abs;
	
	NSFS_SIZE:  type = weak, value = BANK_ART * $1000;
	ART_SIZE:   type = weak, value = (BANK_BASE - BANK_ART) * $1000;
	STUB_SIZE:  type = weak, value = $20;
	STUB_ADDR:  type = weak, value = $10000 - STUB_SIZE;
	BASE_SIZE:  type = weak, value = ((BANK_END - BANK_BASE) * $1000) - STUB_SIZE;
}

MEMORY
{
	RAM_ZP:     start =    ZP_LOW, size = ZP_HIGH - ZP_LOW, type = rw, file = "";
	RAM_STACK:  start =     $0100, size =              $80, type = rw, file = "";
	RAM_MAIN:   start =   RAM_LOW, size =   $800 - RAM_LOW, type = rw, file = "";

	ROM_HEADER: start =     $0000, size =              $10, type = ro, file = %O, fill = yes, fillval = 0;
	ROM_NSFS:   start =     $0000, size =        NSFS_SIZE, type = ro, file = %O, fill = yes, fillval = 0;
	ROM_ART:    start =     $0000, size =         ART_SIZE, type = ro, file = %O, fill = yes, fillval = 0;

	ROM_BASE:   start =     $8000, size =      BASE_SIZE, type = ro, file = %O, fill = yes, fillval = 0;
	ROM_RESET:  start = STUB_ADDR, size =      STUB_SIZE, type = ro, file = %O, fill = yes, fillval = 0;
}

SEGMENTS
{
	BASE_ZP:    load =     RAM_ZP, type =  zp, define = yes, optional = yes;
	CUSTOM_ZP:  load =     RAM_ZP, type =  zp, define = yes, optional = yes;
	STACK:      load =  RAM_STACK, type = bss, define = yes, optional = yes;
	RAMP_CODE:  load =   ROM_BASE, type =  ro, define = yes, run = RAM_MAIN;
	RAMP_RAM:   load =   RAM_MAIN, type =  rw, define = yes;
	BASE_RAM:   load =   RAM_MAIN, type = bss, define = yes, optional = yes;
	CUSTOM_RAM: load =   RAM_MAIN, type = bss, define = yes, optional = yes;
	OAM:        load =   RAM_MAIN, type = bss, define = yes, optional = yes, align = $100;

	HEADER:     load = ROM_HEADER, type =  ro, define = yes;
	NSFS:       load =   ROM_NSFS, type =  ro, define = yes;
	ART:        load =    ROM_ART, type =  ro, define = yes, optional = yes;
	BASE_LOW:   load =   ROM_BASE, type =  ro, define = yes;
	BASE:       load =   ROM_BASE, type =  ro, define = yes;
	ALIGN:      load =   ROM_BASE, type =  ro, define = yes, optional = yes, align = 32;
	CUSTOM:     load =   ROM_BASE, type =  ro, define = yes, optional = yes;
	RESET:      load =  ROM_RESET, type =  ro, define = yes;
	VECTORS:    load =  ROM_RESET, type =  ro, define = yes, start = $FFFA;
}
