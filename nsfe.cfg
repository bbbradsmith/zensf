SYMBOLS
{
	BANK_STUB:  type = import, addrsize = abs;
	ZP_LOW:     type = import, addrsize = abs;
	RAM_LOW:    type = import, addrsize = abs;
	
	NSFS_SIZE:  type = weak, addrsize = abs, value = BANK_STUB * $1000;
}

MEMORY
{
	RAM_ZP:     start =  ZP_LOW, size = $100 -  ZP_LOW, type = rw, file = "";
	RAM_STACK:  start =   $0100, size =           $100, type = rw, file = "";
	RAM_MAIN:   start = RAM_LOW, size = $800 - RAM_LOW, type = rw, file = "";
	
	# dummy NSF header from nsf.s
	NSF_HEADER: start =   $0000, size =            $80, type = ro, file = "";
	
	# header, INFO, BANK, DATA chunks
	CHNK_HEAD:  start =   $0000, size =        46, type = ro, file = %O;
	CHNK_INFO:  start =   $0000, size =     $1000, type = ro, file = %O, fill = no;
	CHNK_BANK:  start =   $0000, size =     $1000, type = ro, file = %O, fill = no;
	CHNK_DATA:  start =   $0000, size =     $1000, type = ro, file = %O, fill = no;

	# DATA contents
	ROM_NSFS:   start =   $0000, size = NSFS_SIZE, type = ro, file = %O, fill = yes, fillval = 0;
	ROM_STUB:   start =   $8000, size =     $1000, type = ro, file = %O, fill = no;
	
	# more NSFe chunks
	CHNK_auth:  start =   $0000, size =     $1000, type = ro, file = %O, fill = no;
	CHNK_time:  start =   $0000, size =     $1000, type = ro, file = %O, fill = no;
	CHNK_fade:  start =   $0000, size =     $1000, type = ro, file = %O, fill = no;
	CHNK_tlbl:  start =   $0000, size =     $1000, type = ro, file = %O, fill = no;
	CHNK_NEND:  start =   $0000, size =     $1000, type = ro, file = %O, fill = no;
}

SEGMENTS
{
	HEADER:     load = NSF_HEADER, type =  ro; # dummy

	BASE_ZP:    load =     RAM_ZP, type =  zp, define = yes, optional = yes;
	STACK:      load =  RAM_STACK, type = bss, define = yes, optional = yes;
	RAMP_CODE:  load =   ROM_STUB, type =  ro, define = yes, run = RAM_MAIN;
	RAMP_RAM:   load =   RAM_MAIN, type =  rw, define = yes;
	BASE_RAM:   load =   RAM_MAIN, type = bss, define = yes, optional = yes;

	NSFS:       load =   ROM_NSFS, type =  ro, define = yes;
	STUB:       load =   ROM_STUB, type =  ro, define = yes;

	NSFE_HEAD:  load =  CHNK_HEAD, type =  ro, define = yes;
	NSFE_INFO:  load =  CHNK_INFO, type =  ro, define = yes;
	NSFE_BANK:  load =  CHNK_BANK, type =  ro, define = yes;
	NSFE_DATA:  load =  CHNK_DATA, type =  ro, define = yes;
	NSFE_auth:  load =  CHNK_auth, type =  ro, define = yes, optional = yes;
	NSFE_time:  load =  CHNK_time, type =  ro, define = yes, optional = yes;
	NSFE_fade:  load =  CHNK_fade, type =  ro, define = yes, optional = yes;
	NSFE_tlbl:  load =  CHNK_tlbl, type =  ro, define = yes, optional = yes;
	NSFE_NEND:  load =  CHNK_NEND, type =  ro, define = yes;
}
